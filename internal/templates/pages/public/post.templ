package public

import "github.com/kctjohnson/mid-blog/internal/db/models"
import "github.com/kctjohnson/mid-blog/internal/templates/components"
import "strings"
import "strconv"

templ LockedPostContent(post models.Post) {
	<div class="w-full flex flex-col items-center pt-8 px-4">
		<div class="prose flex flex-col items-center">
			<h1>{ post.Title }</h1>
			<div class="flex flex-row items-center m-1">
				<div class="skeleton w-6 h-6 rounded-full mr-2"></div>
				<p class="text-sm capitalize">{ post.Blogger.FirstName } { post.Blogger.LastName }</p>
			</div>
			<p>{ strings.Split(post.Content, "\n")[0] }</p>
			<div class="divider"></div>
			<div class="glass border-none shadow-none">
				<p class="text-gray-300 w-full">Reading limit reached. Please <a class="link" href="/login">log in</a> to read the rest of the article.</p>
			</div>
			<div class="divider"></div>
			<p class="indent-8 capitalize">By { post.Blogger.FirstName } { post.Blogger.LastName } <em class="text-gray-300 normal-case">- Published on { strings.Split(post.CreateDate.String(), " ")[0] }</em></p>
		</div>
	</div>
}

templ PostContent(post models.Post) {
	<div class="w-full flex flex-col items-center pt-8 px-4">
		<div class="prose flex flex-col items-center">
			<h1>{ post.Title }</h1>
			<div class="flex flex-row items-center m-1">
				<div class="skeleton w-6 h-6 rounded-full mr-2"></div>
				<p class="text-sm capitalize">{ post.Blogger.FirstName } { post.Blogger.LastName }</p>
			</div>
			for _, paragraph := range strings.Split(post.Content, "\n") {
				<p>{ paragraph }</p>
			}
			<p class="indent-8 capitalize">By { post.Blogger.FirstName } { post.Blogger.LastName } <em class="text-gray-300 normal-case">- Published on { strings.Split(post.CreateDate.String(), " ")[0] }</em></p>
		</div>
	</div>
}

templ PostStats(post models.Post) {
	<div id="post-stats" class="flex flex-row justify-center">
		<p
			class={
				"mr-1",
				templ.KV("text-green-500", (post.Likes-post.Dislikes) > 0),
				templ.KV("text-red-500", (post.Likes-post.Dislikes) < 0),
			}
		>
			{ strconv.Itoa(post.Likes - post.Dislikes) }
		</p>
		<button hx-post={ "/api/posts/" + strconv.Itoa(post.ID) + "/like" } hx-target="#post-stats" hx-swap="outerHTML" class="btn btn-xs bg-green-500">+</button>
		<button hx-post={ "/api/posts/" + strconv.Itoa(post.ID) + "/dislike" } hx-target="#post-stats" hx-swap="outerHTML" class="btn btn-xs bg-red-500">-</button>
	</div>
}

templ CommentStats(comment models.Comment) {
	<div id="comment-stats" class="flex flex-row justify-center">
		<p
			class={
				"mr-1",
				templ.KV("text-green-500", (comment.Likes-comment.Dislikes) > 0),
				templ.KV("text-red-500", (comment.Likes-comment.Dislikes) < 0),
			}
		>
			{ strconv.Itoa(comment.Likes - comment.Dislikes) }
		</p>
		<button hx-post={ "/api/comments/" + strconv.Itoa(comment.ID) + "/like" } hx-target="#comment-stats" hx-swap="outerHTML" class="btn btn-xs bg-green-500">+</button>
		<button hx-post={ "/api/comments/" + strconv.Itoa(comment.ID) + "/dislike" } hx-target="#comment-stats" hx-swap="outerHTML" class="btn btn-xs bg-red-500">-</button>
	</div>
}

templ Comment(user *models.User, comment models.Comment) {
	<li id={ "comment-" + strconv.Itoa(comment.ID) }>
		<div class="flex flex-row items-center m-1">
			<div class="skeleton w-6 h-6 rounded-full mr-2"></div>
			<p class="text-sm">{ comment.User.Username }</p>
		</div>
		<p style="max-width: 65ch">{ comment.Content }</p>
		<div class="flex flex-row items-center space-x-2">
			<p><em class="text-sm text-gray-400">{ strings.Split(comment.CreateDate.String(), " ")[0] }</em></p>
			if user != nil {
				@CommentStats(comment)
			}
		</div>
	</li>
}

templ CommentsSection(user *models.User, post models.Post, comments []models.Comment) {
	<div id="comments-section" class="w-full flex flex-col items-center pt-24">
		if user != nil {
			<form id="comment-form" hx-post="/api/posts/comment" hx-target="#comments-section" hx-swap="outerHTML" class="w-full flex flex-col sm:items-center gap-4">
				<input type="hidden" name="post_id" value={ strconv.Itoa(post.ID) }/>
				<input type="hidden" name="user_id" value={ strconv.Itoa(user.ID) }/>
				<textarea name="content" class="textarea textarea-bordered sm:min-w-96 p-4 mx-4" placeholder="Write a comment..."></textarea>
				<button type="submit" class="btn mx-4">Submit</button>
			</form>
		} else {
			<p class="prose text-gray-300"><em><a class="link text-gray-400" href="/login">Log in</a> to comment</em></p>
		}
		if len(comments) > 0 {
			<div class="divider"></div>
			<h2 class="text-xl font-bold pb-8">Comments</h2>
			<ul class="flex flex-col items-center gap-8 pb-8 px-4">
				for _, comment := range comments {
					@Comment(user, comment)
				}
			</ul>
		}
	</div>
}

templ Post(user *models.User, post models.Post, comments []models.Comment) {
	@components.Layout("MidBlog - " + post.Title) {
		<div>
			@components.Navbar(user)
			if user == nil {
				@LockedPostContent(post)
			} else {
				@PostContent(post)
			}
			<div class="w-full flex flex-row justify-center pt-8 px-4 space-x-1">
				if user != nil {
					@PostStats(post)
				} else {
					<p class="prose text-gray-300"><em><a class="link text-gray-400" href="/login">Log in</a> to rate post</em></p>
				}
			</div>
			@CommentsSection(user, post, comments)
		</div>
	}
}
